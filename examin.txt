-- # EXAM FOR WEEK 8

-- ## KEEP IN MIND: YOU ARE DOING THIS FOR YOUR BRIGHT FUTURE, SO GIVE YOUR 120%!
-- ## ПОМНИТЕ: ВЫ ДЕЛАЕТЕ ЭТО ДЛЯ СВОЕГО СВЕТЛОГО БУДУЩЕГО, ПОЭТОМУ ВЫКЛАДЫВАЙТЕСЬ НА ВСЕ СВОИ 120%!

-- ## RULES:
-- > No interner, no help to each other!

-- > Make one file and place all your work there (e.g. azizmurod_orifzoda.py)

-- > Send the file at 

-- > You have 2 hours only

-- ### Task 1 - CREATE
-- Create tables: Employees, Departments, Locations, Jobs. 
--  - Employees: id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct, department_id.
--  - Departments: id, department_name, manager_name, location_id.
--  - Locations: id, city, region, street_address.
--  - Jobs: id, title, is_active.
--  Realationships:
--  - one to one: Departments with Location
--  - one to many: Departments with Employees
--  - one to many: Jobs with Employees

create table Employees(
	id serial primary key,
	first_name varchar(50),
	last_name varchar(50),
	email varchar(255),
	phone_number varchar(13),
	hire_date date,
	job_id int references Jobs(id),
	salary numeric(10,2),
	commision_pct numeric(5,2),
	department_id int references Departments(id)
)


create table Departments(
	id serial primary key,
	department_name varchar(100),
	manager_name varchar(100),
	location_id int unique references Locations(id) on delete cascade 
)


create table Locations(
	id serial primary key,
	city varchar(100),
	region varchar(100),
	street_address varchar(255)
)

create table Jobs(
	id serial primary key,
	title varchar(255),
	is_active bool
)

-- ### Task 2 - INSERT
--  - INSEERT 5 JOBS - backend, frontend, fullstack, designer, manager.
--  - INSERT 3 DEPARTMENTS - management, accontant, development
--  - INSERT 5 LOCATION - any location
--  - INSERT 10 EMPLOYEES:
--     - 3 employees must be managers of each department(3 сотрудника должны быть менеджерами каждого отдела)
--     - 5 employees must be developers (5 сотрудников должны быть разработчиками)
--     - 2 сотрудника должны быть из бухгалтерии

insert into jobs(title) values
('backend'),
('frontend'),
('fullstack'),
('designer'),
('manager')

insert into locations(city,region,street_address) values
('dushanbe','sino','mahkamov41'),
('New York','buffalo','star21'),
('kulob','firdavsi','rudaki11'),
('london','buckin','william32'),
('Moscow','city','luzhniki')

insert into departments(department_name,manager_name,location_id) values
('management','Tavhid',11),
('accontant','Sunatullo',12),
('development','Abdullo',13)

insert into employees(first_name, last_name, email, phone_number, hire_date, job_id, salary, commision_pct, department_id) values
('user1','userov1','user1@gmail.com','+992123456789','2022-01-01',5,10000,11,10),
('user2','userov2','user2@gmail.com','+992123456788','2021-01-01',5,11000,12,11),
('user3','userov3','user3@gmail.com','+992123456787','2021-01-01',5,12000,11,12),
('user4','userov4','user4@gmail.com','+992123456786','2021-01-01',1,13000,10,12),
('user5','userov5','user5@gmail.com','+992123456785','2023-01-01',2,11000,10,12),
('user6','userov6','user6@gmail.com','+992123456784','2024-01-01',1,10000,9,12),
('user7','userov7','user7@gmail.com','+992123456783','2020-01-01',2,12000,12,12),
('user8','userov8','user8@gmail.com','+992123456782','2022-01-01',3,13000,12,12),
('user9','userov9','user9@gmail.com','+992123456781','2024-01-01',4,11000,12,11),
('user10','userov10','user10@gmail.com','+992123456780','2019-01-01',4,110000,13,11)


-- ### Task 3 ALTER
--     a) Add a column to store employee birthdate (Добавьте столбец для хранения даты рождения сотрудника)

alter table employees
add column birthdate date

--     b) Change the data type of phone_number in employees to allow more characters (Измените тип данных phone_number в employees, чтобы разрешить больше символов)

alter table employees
alter column phone_number type varchar(15)

--     c) Rename the commission_pct column to commission_percentage in employees(Переименуйте столбец commission_pct в commission_percentage в employees)

alter table employees
rename column commision_pct to commission_percentage



--     d) Add a unique constraint on the email column in employees if it wasn't defined before (Добавьте уникальное ограничение для столбца email в employees, если оно не было определено ранее)

alter table employees
alter column email 
set unique

--     e) Modify the is_active column in the jobs table to default to TRUE (Измените столбец is_active в таблице jobs, чтобы значение по умолчанию было TRUE)

alter table jobs
alter column is_active set default True

-- ### Task 4 SELECT
--     a) Filter all departments located in 'New York' (Отфильтровать все отделы, расположенные в «Нью-Йорке»)

select * from departments where location_id in  (select id from locations where city ='New York' ) 

--     b) Filter all employees hired after January 1, 2022 (Отфильтровать всех сотрудников, нанятых после 1 января 2022 г.)

select * from employees where hire_date>'2022-01-01'

--     c) Filter employees whose email ends with '@example.com' (Отфильтровать сотрудников, чей адрес электронной почты заканчивается на «@example.com»)

select * from employees where email like '%@example.com'

--     d) Filter jobs where the title contains the word 'Manager' (Отфильтровать вакансии, в названии которых содержится слово «Менеджер»)

select * from jobs where title ilike '%manager%'

--     e) Filter employees who do not belong to the departments with ids 2 and 4 (Отфильтровать сотрудников, которые не относятся к отделам с идентификаторами 2 и 4)

select * from employees where department_id not in (2,4)

--     f) Filter employees with a salary between 4000 and 8000 (Отфильтровать сотрудников с зарплатой от 4000 до 8000)

select * from employees where salary between 4000 and 8000

-- ### Task 5 JOIN
--     a) Retrieve all employees along with their department names (Получить всех сотрудников вместе с названиями их отделов)

select e.first_name, d.department_name from employees e
inner join departments d  on e.department_id = d.id

--     b) Retrieve all employees, their department names, and the location city (Получить всех сотрудников, названия их отделов и город расположения)

select e.first_name, d.department_name, l.city from employees e
inner join departments d on e.department_id  = d.id 
inner join locations l on d.location_id = l.id

--     d) Retrieve all departments and their managers' names (include departments without managers) (Получить все отделы и имена их менеджеров (включая отделы без менеджеров))

select d.department_name, e.first_name from departments d
full join employees e on d.id = e.department_id

--     e) Retrieve all employees and their departments, including employees without departments and departments without employees (Получить всех сотрудников и их отделы, включая сотрудников без отделов и отделы без сотрудников)

select e.first_name, d.department_name from employees e
left join departments d on e.department_id = d.id

--     f) Retrieve employees who work in the 'Sales' department along with their job titles (Получить сотрудников, которые работают в отделе «Продажи», вместе с их должностями)

select e.first_name, j.title from employees e
inner join departments d on e.department_id = d.id and d.department_name = 'Sales'
inner join jobs j on e.job_id = j.id

--     g) Retrieve the number of employees in each department (Получить количество сотрудников в каждом отделе)

select d.department_name, count(e.first_name) from employees e 
inner join departments d on e.department_id = d.id group by d.department_name


--     h) Retrieve employees whose salary is higher than the average salary of their department (Получить сотрудников, чья зарплата выше средней зарплаты их отдела)

select e.first_name from employees e
inner join departments d on e.salary> (select avg(salary) from employees where e.department_id = d.id) 
